kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: redis
  namespace: im-live
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 6.0.9
    app.kubesphere.io/instance: redis
    helm.sh/chart: redis-0.3.5
  annotations:
    kubesphere.io/creator: dev-zhang
    meta.helm.sh/release-name: redis
    meta.helm.sh/release-namespace: im-live
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: redis
      app.kubernetes.io/name: redis
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: redis
        app.kubernetes.io/name: redis
      annotations:
        kubesphere.io/creator: dev-zhang
    spec:
      volumes:
        - name: configs
          configMap:
            name: redis
            defaultMode: 420
      containers:
        - name: redis
          image: 'redis:6.0.9-alpine'
          command:
            - /bin/sh
            - '-c'
            - |
              rm -rf /redis/data/lost+found
              args="
              --include /tmp/conf/default.conf
              --include /tmp/conf/user.conf

              "
              redis-server $args
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: configs
              mountPath: /tmp/conf
            - name: data
              mountPath: /data/redis
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: redis
          app.kubernetes.io/name: redis
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: redis
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
